# -*- coding: utf-8 -*-
"""orl_image_CNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HV5f1PLzeasQzM3HiIs2M0QWTHMTfQwy
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

import numpy as np
#from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from keras import backend as K
import cv2
import matplotlib.image as mimg
K.tensorflow_backend.set_image_dim_ordering('th')
seed = 7
np.random.seed(seed)

samp=7
train_data=np.zeros((7*43,64,64))
train_label=np.zeros((7*43,))
count=-1
for i in range(1,44):
    for j in range(1,samp+1):
        count=count+1
        #print(count)
        path ='/gdrive/My Drive/orl_face/u%d/%d.png'%(i,j)
        
        image=mimg.imread(path)
        #print(f"Image Shape={image.shape}")
        im=cv2.resize(image,(64,64))
        #print(f"IM Shape={im.shape}")
        train_data[count,:,:]=im
        train_label[count]=i
test_data=np.zeros(((10-samp)*43,64,64))
test_label=np.zeros((10-samp)*43)
count=-1
for i in range(1,44):
    for j in range(samp+1,11):
        count=count+1
        #print(count)
        path ='/gdrive/My Drive/orl_face/u%d/%d.png'%(i,j)
        
        image=mimg.imread(path)
        #print(f"Image Shape={image.shape}")
        im=cv2.resize(image,(64,64))
        #print(f"IM Shape={im.shape}")
        test_data[count,:,:]=im
        test_label[count]=i
train_data = train_data.reshape(train_data.shape[0], 1,64,64).astype('float32')
test_data = test_data.reshape(test_data.shape[0], 1, 64,64).astype('float32')
print(train_data.shape)
print(test_data.shape)
train_data=train_data/255
print(train_data.shape)
test_data=test_data/255
print(test_data.shape)
train_label = np_utils.to_categorical(train_label)
test_label = np_utils.to_categorical(test_label)
num_classes = test_label.shape[1]
print(train_label.shape)
print(test_label.shape)
print(num_classes)

model = Sequential()
model.add(Conv2D(35,(5,5), input_shape=(1,64,64), activation='relu'))
#model.add(Conv2D(35,(5,5), input_shape=(1,28,28), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))
# Compile model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Fit the model
model.fit(train_data, train_label, validation_data=(test_data, test_label), epochs=650, batch_size=200, verbose=2)
# Final evaluation of the model
scores = model.evaluate(test_data, test_label, verbose=0)
print("CNN Error: %.2f%%" % (100-scores[1]*100))

import joblib
scores = model.evaluate(np.array(test_data), np.array(test_label), batch_size=32)
print("CNN Error: %.2f%%" % (100-scores[1]*100))
print("Loss: " + str(scores[0]))
a=("Accuracy: " + str(scores[1]))

#joblib.dump(model, "photo.pkl")

from sklearn.externals import joblib
joblib.dump(model,'/gdrive/My Drive/image.pkl')

from sklearn.metrics import accuracy_score
test_true = np.argmax(test_label, axis=1)
test_pred = np.argmax(model.predict(test_data), axis=1)
print("CNN Model Accuracy on test set: {:.4f}".format(accuracy_score(test_true, test_pred)*100))

a3=classifier2.score(test_data,test_label)
print('Accuracy with poly ',a3)
plt.title('Accuracy graph')
plt.xlabel('data')
plt.ylabel('target')
a=['linear','rbf','poly']
b=[a1,a2,a3]
plt.bar(a,b,color=['red','green','blue'],width=0.40)